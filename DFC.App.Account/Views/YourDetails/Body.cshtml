@using DFC.App.Account.ViewComponents.Row
@using DFC.App.Account.ViewModels
@using DFC.App.Account.Application.Common.Models
@model DFC.App.Account.ViewModels.YourDetailsCompositeViewModel

    <div class="govuk-width-container">
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">

                <govukHeadingH1 text="@Model.PageHeading"></govukHeadingH1>
                <govukHeadingH2 text="Your personal details"></govukHeadingH2>
                <div class="govuk-form-group">
                    <form action="@Model.CompositeSettings.Path/@CompositeViewModel.PageId.EditDetails" class="form-group mt" method="get">
                        <div class="govuk-form-group">
                            <table class="check-your-answers" role="presentation">
                                <tbody>
                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Title", LabelValue = (int)@Model.CustomerDetails.Title == 99 ? "Not Provided" : @Model.CustomerDetails.Title.ToString() })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "First name", LabelValue = @Model.CustomerDetails.GivenName })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Last name", LabelValue = @Model.CustomerDetails.FamilyName })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Date of birth", LabelValue = @Model.CustomerDetails.DateofBirth?.ToString("dd MMMM yyyy") })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Gender", LabelValue = (int)@Model.CustomerDetails.Gender == 99 ? "Not Provided" : Model.CustomerDetails.Gender.GetDisplayName() })

                                </tbody>
                            </table>
                            <h2 class="heading-medium">Your contact details</h2>
                            <table class="check-your-answers" role="presentation">
                                <tbody>

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Email address", LabelValue = $"<a href ='mailto:{@Model.CustomerDetails.Contact.EmailAddress}'>{@Model.CustomerDetails.Contact.EmailAddress}</a>" })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Home number", LabelValue = Model.CustomerDetails.Contact == null ? "" : @Model.CustomerDetails.Contact.HomeNumber })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Mobile number", LabelValue = Model.CustomerDetails.Contact == null ? "" : @Model.CustomerDetails.Contact.MobileNumber })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel() { Label = "Alternative phone number", LabelValue = Model.CustomerDetails.Contact == null ? "" : @Model.CustomerDetails.Contact.AlternativeNumber })

                                    @await Component.InvokeAsync(nameof(Row), new RowModel()
                               {
                                   Label = "Preferred contact method",
                                        LabelValue = Model.CustomerDetails.Contact == null ? "" :
                                            (int)Model.CustomerDetails.Contact.PreferredContactMethod == 99 || (int)Model.CustomerDetails.Contact.PreferredContactMethod == 0 ? "Not known" :
                                                Model.CustomerDetails.Contact.PreferredContactMethod.ToString()
                               })

                                </tbody>
                            </table>
                            <h2 class="heading-medium">Your marketing preferences</h2>
                            <p class="govuk-body">We may want to speak to you in line with our <a href="/help/privacy-and-cookies" class="govuk-link">privacy policy</a>. You can opt out at any time.</p>
                            <p class="govuk-body">Select the options that apply to you.</p>
                            <p class="govuk-body">I want to take part in:</p>

                            <legend class="govuk-visually-hidden">
                                Your marketing preferences
                            </legend>
                            <div class="form-group govuk-checkboxes govuk-checkboxes--small)">

                                <govukCheckbox id="@Model.GetElementId("govukCheckBox", "marketing-opt-out")"
                                               label="user research"
                                               AdditionalClass="checkbox-container-item govuk-checkboxes govuk-!-width-full"
                                               checked="@Model.CustomerDetails.OptInUserResearch" disabled="true">
                                </govukCheckbox>

                                <govukCheckbox id="@Model.GetElementId("govukCheckBox", "market-research")"
                                               label="market research"
                                               AdditionalClass="checkbox-container-item govuk-checkboxes govuk-!-width-full"
                                               checked="@Model.CustomerDetails.OptInMarketResearch" disabled="true">
                                </govukCheckbox>
                            </div>
                        </div>
                        <div>
                            <govukButton id="@Model.GetElementId("govukButton", "Edit")" text="Edit your details" />
                        </div>
                    </form>
                </div>
            </div>


            <div class="govuk-grid-column-one-third">
                <partial name="~/ViewComponents/SpeakToAdviser/SpeakToAdvisorComponent.cshtml" />
            </div>
        </div>
    </div>